{"version":3,"sources":["pokemon.png","pokemon.js","components/PokeType.js","components/PokeCard.js","components/PokeDex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Pokemon","data","Object","classCallCheck","this","id","name","sprite","sprites","front_default","types","map","ty","type","movs","moves","slice","mo","move","PokeType","props","react_default","a","createElement","className","concat","PokeCard","_this","possibleConstructorReturn","getPrototypeOf","call","state","Pokemons","url","fetch","res","json","pokemon","window","scrollTo","setState","fetchPokemons","newProps","Fragment","build","alt","src","effect","components_PokeType","key","Component","PokeDex","isLoading","pokemons","fetchPokemon","bind","_this2","_this$state","href","onClick","PokeTitle","results","i","components_PokeCard","previous","next","App","components_PokeDex","React","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.381e65c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.49255cb2.png\";","class Pokemon {\r\n    constructor(data) {\r\n      this.id = data.id;\r\n      this.name = data.name;\r\n      this.sprite = data.sprites.front_default;\r\n      this.types = data.types.map(ty=> \r\n          ty.type.name\r\n      )\r\n      let movs = data.moves.slice(0,4)\r\n      this.moves = movs.map(mo =>\r\n        mo.move.name  \r\n      )\r\n    }\r\n  }\r\n  \r\n  export default Pokemon;","import React from 'react';\r\n\r\nconst PokeType = (props) => {\r\n\r\n    return (\r\n        <div className={`pokeType d-inline-block capitalize mb-md-3 mb-1 ${\" \"+ props.type}`}>\r\n            {props.type}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeType;","import React, { Component } from 'react';\r\nimport Pokemon from '../pokemon';\r\nimport PokeType from './PokeType'\r\n// import PokeDesc from './PokeDesc';\r\n\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\nclass PokeCard extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Pokemons: {},\r\n        }\r\n    }\r\n\r\n    async fetchPokemons (url) {\r\n        const res = await fetch(url);\r\n        const data = await res.json();\r\n        const pokemon = new Pokemon(data);\r\n        window.scrollTo(-10, -10);\r\n        return (\r\n            this.setState({\r\n                Pokemons: pokemon,\r\n            })\r\n        )\r\n    }\r\n    \r\n\r\n    componentWillMount() {\r\n        this.fetchPokemons (this.props.url);\r\n    }\r\n\r\n    componentWillReceiveProps (newProps) {\r\n        this.fetchPokemons (newProps.url);\r\n    }\r\n    \r\n    render() {\r\n        const { Pokemons } = this.state;\r\n\r\n        return (\r\n            <>\r\n            <div className=\"col-lg-2 col-md-3  col-4 p-0 m-3 PokeCard\">\r\n\r\n                <div className=\"spriteContainer mt-md-5 mb-md-5\">\r\n                    <LazyLoadImage\r\n                        alt=\"\"\r\n                        src={Pokemons.sprite}\r\n                        effect=\"blur\"\r\n                        className=\"pokeSprite\" />\r\n                </div>\r\n                <div className=\"nameContainer\">\r\n                    <h5 className=\"pokeName capitalize p-0 mt-2\">{Pokemons.name}</h5>\r\n\r\n                    {(Pokemons.types?\r\n                            Pokemons.types.map((type,id) => (\r\n                            <PokeType key={id++} type = {type} />))\r\n                        :\r\n                            null)}\r\n                </div>\r\n           \r\n            </div>\r\n            {/* <div className=\"col-10\">\r\n                <PokeDesc \r\n                    id={Pokemons.id}\r\n                    name={Pokemons.name}\r\n                    sprite={Pokemons.sprite}\r\n                    types={Pokemons.types}\r\n                    moves={Pokemons.moves}\r\n                />                \r\n            </div> */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PokeCard;","import React, { Component } from 'react';\r\nimport PokeCard from './PokeCard';\r\nimport PokeTitle from '.././pokemon.png';\r\n\r\n\r\nclass PokeDex extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            pokemons: {}\r\n        }\r\n        this.fetchPokemon.bind();\r\n    }\r\n\r\n    async fetchPokemon (url) {\r\n        const res = await fetch(url);\r\n        const pokemons = await res.json();\r\n        return (\r\n            this.setState({\r\n                pokemons:pokemons,\r\n                isLoading: false\r\n            })\r\n        )\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.fetchPokemon(\"https://pokeapi.co/api/v2/pokemon\");\r\n    }\r\n\r\n    render() {\r\n        const { pokemons, isLoading } = this.state;\r\n        return (\r\n            <div className=\"PokeDex\">\r\n                <div className=\"PokeContainer\">\r\n                    <div className=\"text-center text-light\">\r\n                        <button className=\"bg-transparent border-0\" href=\"\" onClick={()=>this.fetchPokemon(\"https://pokeapi.co/api/v2/pokemon\")}>\r\n                            <img src={PokeTitle} alt=\"pokemon\" className=\"pokeTitle\" />\r\n                        </button>\r\n                        <div className=\"container\">\r\n                            <div className=\"row d-flex justify-content-center\">\r\n\r\n                                {(isLoading) ?\r\n                                    <div>\r\n                                        <p className=\"lead\">Loading...</p>\r\n                                    </div>\r\n                                    :\r\n                                    // <PokeCard url={pokemons.results[0].url} />\r\n                                    \r\n                                    pokemons.results.map((pokemon, i) => (\r\n                                        <PokeCard key={i++} url={pokemon.url} />\r\n                                    ))\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"BtnContainer\">\r\n                            <button className={`btn btn-primary m-2 ${pokemons.previous?'active ':'disabled'}`} onClick={()=>{\r\n                                this.fetchPokemon(pokemons.previous)\r\n                            }}>\r\n                                Previous\r\n                            </button>\r\n                            <button className={`btn btn-primary m-2 ${pokemons.next?'active ':'disabled'}`} onClick={()=>{\r\n                                this.fetchPokemon(pokemons.next)\r\n                            }}>\r\n                                Next\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokeDex;","import React from 'react';\nimport './App.scss';\nimport PokeDex from './components/PokeDex';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PokeDex />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}