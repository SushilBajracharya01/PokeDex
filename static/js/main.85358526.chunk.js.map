{"version":3,"sources":["pokemon.png","pokemon.js","components/PokeType.js","components/PokeCard.js","components/PokeDex.js","App.js","serviceWorker.js","index.js","pokeball.svg"],"names":["module","exports","__webpack_require__","p","Pokemon","data","Object","classCallCheck","this","id","name","sprite","sprites","front_default","types","map","ty","type","movs","moves","slice","mo","move","PokeType","props","react_default","a","createElement","className","concat","PokeCard","_ref","url","_useState","useState","_useState2","slicedToArray","pokemon","setPokemon","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","fetch","sent","json","stop","_x","apply","arguments","fetchPokemons","Fragment","onClick","speech","Speech","init","then","console","log","catch","e","error","text","cancel","speak","PokeSpeak","build","alt","src","effect","components_PokeType","key","PokeDex","isLoading","setIsLoading","_useState3","_useState4","pokemons","setPokemons","_useState5","_useState6","pokemonResults","setPokemonResults","fetchPokemon","useCallback","toConsumableArray","results","_callee2","_context2","fetchInitialPokemon","href","PokeTitle","PokeballSvg","index_es","dataLength","length","hasMore","loader","endMessage","style","textAlign","components_PokeCard","App","components_PokeDex","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6QCevBC,EAdb,SAAAA,EAAYC,GAAOC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACjBI,KAAKC,GAAKJ,EAAKI,GACfD,KAAKE,KAAOL,EAAKK,KACjBF,KAAKG,OAASN,EAAKO,QAAQC,cAC3BL,KAAKM,MAAQT,EAAKS,MAAMC,IAAI,SAAAC,GAAE,OAC1BA,EAAGC,KAAKP,OAEZ,IAAIQ,EAAOb,EAAKc,MAAMC,MAAM,EAAE,GAC9BZ,KAAKW,MAAQD,EAAKH,IAAI,SAAAM,GAAE,OACtBA,EAAGC,KAAKZ,QCCDa,EATE,SAACC,GAEd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mDAAAC,OAAqD,IAAKL,EAAMP,OACzEO,EAAMP,wDCoFJa,EA/EE,SAAAC,GAAa,IAAVC,EAAUD,EAAVC,IAAUC,EACEC,mBAAS,IADXC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACrBI,EADqBF,EAAA,GACZG,EADYH,EAAA,GAG5BI,oBAAU,YACW,eAAAC,EAAAlC,OAAAmC,EAAA,EAAAnC,CAAAoC,EAAAhB,EAAAiB,KAAG,SAAAC,EAAOZ,GAAP,IAAAa,EAAAxC,EAAAgC,EAAA,OAAAK,EAAAhB,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACFC,MAAMlB,GADJ,cACda,EADcE,EAAAI,KAAAJ,EAAAE,KAAA,EAEDJ,EAAIO,OAFH,OAEd/C,EAFc0C,EAAAI,KAGdd,EAAU,IAAIjC,EAAQC,GAC5BiC,EAAWD,GAJS,wBAAAU,EAAAM,SAAAT,MAAH,gBAAAU,GAAA,OAAAd,EAAAe,MAAA/C,KAAAgD,YAAA,EAMnBC,CAAczB,IACb,CAACA,IA+BJ,OACEP,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACEjC,EAAAC,EAAAC,cAAA,OACEC,UAAU,4CACV+B,QAAS,kBAjCG,SAACtD,GACjB,IAAMuD,EAAS,IAAIC,IAEnBD,EACGE,OACAC,KAAK,SAAC1D,GAEL2D,QAAQC,IAAI,wCAAyC5D,KAEtD6D,MAAM,SAACC,GACNH,QAAQI,MAAM,yCAA0CD,KAG5D,IAAME,EAAI,GAAAxC,OAAMxB,EAAKK,KAAX,SAAAmB,OAAuBxB,EAAKI,GAA5B,SAAAoB,OACRxB,EAAKS,MADG,iCAAAe,OAEsBxB,EAAKc,MAAMJ,IAAI,SAACO,GAAD,OAAUA,EAAO,MAFtD,KAGVsC,EAAOU,SACPV,EACGW,MAAM,CACLF,KAAMA,IAEPN,KAAK,WACJC,QAAQC,IAAI,eAEbC,MAAM,SAACC,GACNH,QAAQI,MAAM,sBAAuBD,KAQtBK,CAAUnC,KAEzBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAC8C,EAAA,cAAD,CACEC,IAAI,GACJC,IAAKtC,EAAQ1B,OACbiE,OAAO,OACPhD,UAAU,gBAGdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAgCS,EAAQ3B,MAErD2B,EAAQvB,MACLuB,EAAQvB,MAAMC,IAAI,SAACE,EAAMR,GAAP,OAChBgB,EAAAC,EAAAC,cAACkD,EAAD,CAAUC,IAAKrE,IAAMQ,KAAMA,MAE7B,0BCoBC8D,EArFC,WAAM,IAAA9C,EACcC,oBAAS,GADvBC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACb+C,EADa7C,EAAA,GACF8C,EADE9C,EAAA,GAAA+C,EAEYhD,mBAAS,IAFrBiD,EAAA7E,OAAA8B,EAAA,EAAA9B,CAAA4E,EAAA,GAEbE,EAFaD,EAAA,GAEHE,EAFGF,EAAA,GAAAG,EAGwBpD,mBAAS,IAHjCqD,EAAAjF,OAAA8B,EAAA,EAAA9B,CAAAgF,EAAA,GAGbE,EAHaD,EAAA,GAGGE,EAHHF,EAAA,GAKdG,EAAeC,sBAAW,eAAA5D,EAAAzB,OAAAmC,EAAA,EAAAnC,CAAAoC,EAAAhB,EAAAiB,KAC9B,SAAAC,EAAOZ,GAAP,IAAAa,EAAAuC,EAAA,OAAA1C,EAAAhB,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACoBC,MAAMlB,GAD1B,cACQa,EADRE,EAAAI,KAAAJ,EAAAE,KAAA,EAEyBJ,EAAIO,OAF7B,OAEQgC,EAFRrC,EAAAI,KAGEa,QAAQC,IAAImB,GACZC,EAAYD,GACZK,EAAiB,GAAA5D,OAAAvB,OAAAsF,EAAA,EAAAtF,CAAKkF,GAALlF,OAAAsF,EAAA,EAAAtF,CAAwB8E,EAASS,WAClDZ,GAAa,GANf,yBAAAlC,EAAAM,SAAAT,MAD8B,gBAAAU,GAAA,OAAAvB,EAAAwB,MAAA/C,KAAAgD,YAAA,GAS9B,CAACgC,IAeH,OAZAjD,oBAAU,YACiB,eAAAC,EAAAlC,OAAAmC,EAAA,EAAAnC,CAAAoC,EAAAhB,EAAAiB,KAAG,SAAAmD,IAAA,IAAAjD,EAAAuC,EAAA,OAAA1C,EAAAhB,EAAAoB,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EACRC,MAAM,qCADE,cACpBL,EADoBkD,EAAA5C,KAAA4C,EAAA9C,KAAA,EAEHJ,EAAIO,OAFD,OAEpBgC,EAFoBW,EAAA5C,KAG1BkC,EAAYD,GACZK,EAAkBnF,OAAAsF,EAAA,EAAAtF,CAAI8E,EAASS,UAC/BZ,GAAa,GALa,wBAAAc,EAAA1C,SAAAyC,MAAH,yBAAAtD,EAAAe,MAAA/C,KAAAgD,YAAA,EAQzBwC,IACC,IAGDvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,0BACVqE,KAAK,GACLtC,QAAS,kBAAM+B,EAAa,uCAE5BjE,EAAAC,EAAAC,cAAA,OAAKgD,IAAKuB,IAAWxB,IAAI,UAAU9C,UAAU,eAE/CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZoD,EACCvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,kBACV+C,IAAKwB,IACLzB,IAAI,6BAIRjD,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEC,WAAU,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAgBc,OAC5BrD,KAAM,WACJe,QAAQC,IAAI,eACZyB,EAAaN,EAASnC,OAExBsD,QAASnB,EAASnC,KAClBuD,OACE/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,kBACV+C,IAAKwB,IACLzB,IAAI,6BAIV9C,UAAU,iDACV6E,WACEhF,EAAAC,EAAAC,cAAA,KAAG+E,MAAO,CAAEC,UAAW,WACrBlF,EAAAC,EAAAC,cAAA,wCAnBN,OAuBG6D,QAvBH,IAuBGA,OAvBH,EAuBGA,EAAgBzE,IAAI,SAACsB,GAAD,OACnBZ,EAAAC,EAAAC,cAACiF,EAAD,CAAU9B,IAAKzC,EAAQL,IAAKA,IAAKK,EAAQL,cCpE5C6E,mLARX,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmF,EAAD,cALUC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9F,EAAAC,EAAAC,cAAC6F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC,kCEnInB/H,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.85358526.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.49255cb2.png\";","class Pokemon {\r\n    constructor(data) {\r\n      this.id = data.id;\r\n      this.name = data.name;\r\n      this.sprite = data.sprites.front_default;\r\n      this.types = data.types.map(ty=> \r\n          ty.type.name\r\n      )\r\n      let movs = data.moves.slice(0,4)\r\n      this.moves = movs.map(mo =>\r\n        mo.move.name  \r\n      )\r\n    }\r\n  }\r\n  \r\n  export default Pokemon;","import React from 'react';\r\n\r\nconst PokeType = (props) => {\r\n\r\n    return (\r\n        <div className={`pokeType d-inline-block capitalize mb-md-3 mb-1 ${\" \"+ props.type}`}>\r\n            {props.type}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeType;","import React, { useEffect, useState } from \"react\";\r\nimport Pokemon from \"../pokemon\";\r\nimport PokeType from \"./PokeType\";\r\n// import PokeDesc from './PokeDesc';\r\nimport Speech from \"speak-tts\";\r\n\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\n\r\nimport PokeballSvg from \"../pokeball.svg\";\r\n\r\nconst PokeCard = ({ url }) => {\r\n  const [pokemon, setPokemon] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchPokemons = async (url) => {\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      const pokemon = new Pokemon(data);\r\n      setPokemon(pokemon);\r\n    };\r\n    fetchPokemons(url);\r\n  }, [url]);\r\n\r\n  const PokeSpeak = (data) => {\r\n    const speech = new Speech();\r\n\r\n    speech\r\n      .init()\r\n      .then((data) => {\r\n        // The \"data\" object contains the list of available voices and the voice synthesis params\r\n        console.log(\"Speech is ready, voices are available\", data);\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"An error occured while initializing : \", e);\r\n      });\r\n\r\n    const text = `${data.name}. i.d${data.id}.. a ${\r\n      data.types\r\n    } Type Pokemon, its moves are ${data.moves.map((move) => move + \".\")} `;\r\n    speech.cancel();\r\n    speech\r\n      .speak({\r\n        text: text,\r\n      })\r\n      .then(() => {\r\n        console.log(\"Success !\");\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"An error occurred :\", e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"col-lg-2 col-md-3  col-4 p-0 m-3 PokeCard\"\r\n        onClick={() => PokeSpeak(pokemon)}\r\n      >\r\n        <div className=\"spriteContainer mt-md-5 mb-md-5\">\r\n          <LazyLoadImage\r\n            alt=\"\"\r\n            src={pokemon.sprite}\r\n            effect=\"blur\"\r\n            className=\"pokeSprite\"\r\n          />\r\n        </div>\r\n        <div className=\"nameContainer\">\r\n          <h5 className=\"pokeName capitalize p-0 mt-2\">{pokemon.name}</h5>\r\n\r\n          {pokemon.types\r\n            ? pokemon.types.map((type, id) => (\r\n                <PokeType key={id++} type={type} />\r\n              ))\r\n            : null}\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"col-10\">\r\n                <PokeDesc \r\n                    id={pokemon.id}\r\n                    name={pokemon.name}\r\n                    sprite={pokemon.sprite}\r\n                    types={pokemon.types}\r\n                    moves={pokemon.moves}\r\n                />                \r\n            </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokeCard;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nimport PokeCard from \"./PokeCard\";\r\nimport PokeTitle from \".././pokemon.png\";\r\n\r\n//assets\r\nimport PokeballSvg from \"../pokeball.svg\";\r\n\r\nconst PokeDex = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [pokemons, setPokemons] = useState({});\r\n  const [pokemonResults, setPokemonResults] = useState([]);\r\n\r\n  const fetchPokemon = useCallback(\r\n    async (url) => {\r\n      const res = await fetch(url);\r\n      const pokemons = await res.json();\r\n      console.log(pokemons);\r\n      setPokemons(pokemons);\r\n      setPokemonResults([...pokemonResults, ...pokemons.results]);\r\n      setIsLoading(false);\r\n    },\r\n    [pokemonResults]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchInitialPokemon = async () => {\r\n      const res = await fetch(\"https://pokeapi.co/api/v2/pokemon\");\r\n      const pokemons = await res.json();\r\n      setPokemons(pokemons);\r\n      setPokemonResults([...pokemons.results]);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchInitialPokemon();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"PokeDex\">\r\n      <div className=\"PokeContainer\">\r\n        <div className=\"text-center text-light\">\r\n          <button\r\n            className=\"bg-transparent border-0\"\r\n            href=\"\"\r\n            onClick={() => fetchPokemon(\"https://pokeapi.co/api/v2/pokemon\")}\r\n          >\r\n            <img src={PokeTitle} alt=\"pokemon\" className=\"pokeTitle\" />\r\n          </button>\r\n          <div className=\"container\">\r\n            {isLoading ? (\r\n              <div className=\"loadingDiv\">\r\n                <img\r\n                  className=\"pokeballSpinner\"\r\n                  src={PokeballSvg}\r\n                  alt=\"pokeball loading spiner\"\r\n                />\r\n              </div>\r\n            ) : (\r\n              <InfiniteScroll\r\n                dataLength={pokemonResults?.length} //This is important field to render the next data\r\n                next={() => {\r\n                  console.log(\"NEXT CALLED\");\r\n                  fetchPokemon(pokemons.next);\r\n                }}\r\n                hasMore={pokemons.next}\r\n                loader={\r\n                  <div className=\"loadingDiv\">\r\n                    <img\r\n                      className=\"pokeballSpinner\"\r\n                      src={PokeballSvg}\r\n                      alt=\"pokeball loading spiner\"\r\n                    />\r\n                  </div>\r\n                }\r\n                className=\"dexContainer row d-flex justify-content-center\"\r\n                endMessage={\r\n                  <p style={{ textAlign: \"center\" }}>\r\n                    <b>Yay! You have seen it all</b>\r\n                  </p>\r\n                }\r\n              >\r\n                {pokemonResults?.map((pokemon) => (\r\n                  <PokeCard key={pokemon.url} url={pokemon.url} />\r\n                ))}\r\n              </InfiniteScroll>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeDex;\r\n","import React from 'react';\nimport './App.scss';\nimport PokeDex from './components/PokeDex';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PokeDex />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pokeball.cde52270.svg\";"],"sourceRoot":""}