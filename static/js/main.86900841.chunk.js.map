{"version":3,"sources":["pokemon.png","pokemon.js","components/PokeType.js","components/PokeCard.js","components/PokeDex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Pokemon","data","Object","classCallCheck","this","id","name","sprite","sprites","front_default","types","map","ty","type","movs","moves","slice","mo","move","PokeType","props","react_default","a","createElement","className","concat","PokeCard","_ref","url","_useState","useState","_useState2","slicedToArray","Pokemons","setPokemons","fetchPokemons","_ref2","asyncToGenerator","regenerator_default","mark","_callee","res","pokemon","wrap","_context","prev","next","fetch","sent","json","window","scrollTo","stop","_x","apply","arguments","useEffect","Fragment","onClick","speech","Speech","init","then","console","log","catch","e","error","text","cancel","speak","PokeSpeak","build","alt","src","effect","components_PokeType","key","PokeDex","isLoading","setIsLoading","_useState3","_useState4","pokemons","fetchPokemon","href","PokeTitle","results","i","components_PokeCard","previous","_this","App","components_PokeDex","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86900841.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.49255cb2.png\";","class Pokemon {\r\n    constructor(data) {\r\n      this.id = data.id;\r\n      this.name = data.name;\r\n      this.sprite = data.sprites.front_default;\r\n      this.types = data.types.map(ty=> \r\n          ty.type.name\r\n      )\r\n      let movs = data.moves.slice(0,4)\r\n      this.moves = movs.map(mo =>\r\n        mo.move.name  \r\n      )\r\n    }\r\n  }\r\n  \r\n  export default Pokemon;","import React from 'react';\r\n\r\nconst PokeType = (props) => {\r\n\r\n    return (\r\n        <div className={`pokeType d-inline-block capitalize mb-md-3 mb-1 ${\" \"+ props.type}`}>\r\n            {props.type}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeType;","import React, { Component, useEffect, useState } from \"react\";\r\nimport Pokemon from \"../pokemon\";\r\nimport PokeType from \"./PokeType\";\r\n// import PokeDesc from './PokeDesc';\r\nimport Speech from \"speak-tts\";\r\n\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\n\r\nconst PokeCard = ({ url }) => {\r\n  const [Pokemons, setPokemons] = useState({});\r\n\r\n  const fetchPokemons = async (url) => {\r\n    const res = await fetch(url);\r\n    const data = await res.json();\r\n    const pokemon = new Pokemon(data);\r\n    window.scrollTo(-10, -10);\r\n    setPokemons(pokemon);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPokemons(url);\r\n  }, [url]);\r\n\r\n  const PokeSpeak = (data) => {\r\n    const speech = new Speech();\r\n\r\n    speech\r\n      .init()\r\n      .then((data) => {\r\n        // The \"data\" object contains the list of available voices and the voice synthesis params\r\n        console.log(\"Speech is ready, voices are available\", data);\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"An error occured while initializing : \", e);\r\n      });\r\n\r\n    const text = `${data.name}. i.d${data.id}.. a ${\r\n      data.types\r\n    } Type Pokemon, its moves are ${data.moves.map((move) => move + \".\")} `;\r\n    speech.cancel();\r\n    speech\r\n      .speak({\r\n        text: text,\r\n      })\r\n      .then(() => {\r\n        console.log(\"Success !\");\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"An error occurred :\", e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"col-lg-2 col-md-3  col-4 p-0 m-3 PokeCard\"\r\n        onClick={() => PokeSpeak(Pokemons)}\r\n      >\r\n        <div className=\"spriteContainer mt-md-5 mb-md-5\">\r\n          <LazyLoadImage\r\n            alt=\"\"\r\n            src={Pokemons.sprite}\r\n            effect=\"blur\"\r\n            className=\"pokeSprite\"\r\n          />\r\n        </div>\r\n        <div className=\"nameContainer\">\r\n          <h5 className=\"pokeName capitalize p-0 mt-2\">{Pokemons.name}</h5>\r\n\r\n          {Pokemons.types\r\n            ? Pokemons.types.map((type, id) => (\r\n                <PokeType key={id++} type={type} />\r\n              ))\r\n            : null}\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"col-10\">\r\n                <PokeDesc \r\n                    id={Pokemons.id}\r\n                    name={Pokemons.name}\r\n                    sprite={Pokemons.sprite}\r\n                    types={Pokemons.types}\r\n                    moves={Pokemons.moves}\r\n                />                \r\n            </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokeCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PokeCard from \"./PokeCard\";\r\nimport PokeTitle from \".././pokemon.png\";\r\n\r\nconst PokeDex = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [pokemons, setPokemons] = useState({});\r\n\r\n  const fetchPokemon = async (url) => {\r\n    const res = await fetch(url);\r\n    const pokemons = await res.json();\r\n    console.log(pokemons)\r\n    setPokemons(pokemons);\r\n    setIsLoading(false);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchPokemon(\"https://pokeapi.co/api/v2/pokemon\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"PokeDex\">\r\n      <div className=\"PokeContainer\">\r\n        <div className=\"text-center text-light\">\r\n          <button\r\n            className=\"bg-transparent border-0\"\r\n            href=\"\"\r\n            onClick={() =>\r\n              fetchPokemon(\"https://pokeapi.co/api/v2/pokemon\")\r\n            }\r\n          >\r\n            <img src={PokeTitle} alt=\"pokemon\" className=\"pokeTitle\" />\r\n          </button>\r\n          <div className=\"container\">\r\n            <div className=\"row d-flex justify-content-center\">\r\n              {isLoading ? (\r\n                <div>\r\n                  <p className=\"lead\">Loading...</p>\r\n                </div>\r\n              ) : (\r\n                // <PokeCard url={pokemons.results[0].url} />\r\n\r\n                pokemons.results.map((pokemon, i) => (\r\n                  <PokeCard key={i++} url={pokemon.url} />\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"BtnContainer\">\r\n            <button\r\n              className={`btn btn-primary m-2 ${\r\n                pokemons.previous ? \"active \" : \"disabled\"\r\n              }`}\r\n              onClick={() => {\r\n                this.fetchPokemon(pokemons.previous);\r\n              }}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              className={`btn btn-primary m-2 ${\r\n                pokemons.next ? \"active \" : \"disabled\"\r\n              }`}\r\n              onClick={() => {\r\n                this.fetchPokemon(pokemons.next);\r\n              }}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeDex;\r\n","import React from 'react';\nimport './App.scss';\nimport PokeDex from './components/PokeDex';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PokeDex />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}